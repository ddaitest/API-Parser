#!/usr/bin/python
#coding:utf-8

import getopt,sys,zipfile,shutil,os,ConfigParser,time,re,json,urllib2

#api_data = open("json.data",'r')
doc_url = 'https://qaapi.qdingnet.com/property-api/tools/'
request_filter = ['request:appDevice','request:appUser'] #ignore in params.
response_id_filter = ['response','data','code','data:message','data:toast']
common_types = ['String','Integer','double','Date','Long','Boolean','Float','int','long','boolean','double','float']
apis = {"getRooms": "brick","uploadDeviceInfo": "brick","getDeviceInfo": "brick","getBuildings": "brick","createEtcCashFeeOrder":"callProperty","getSupportFlag": "callProperty","getPropertyFeeByRoom": "callProperty","getMultipleOwnerByRoom": "callProperty","uploadMoney": "callProperty","getPrintReceipt": "callProperty","getClearMachineReceipt": "callProperty","getReplaceFees": "callProperty","propertyChargesOrder": "callProperty","noticeAfterPaySuccess": "callProperty","getEtcFeeByMonth": "callProperty","uploadPayLog": "callProperty","checkMemberByMobile": "user","getProjectRoomsByMobile": "user"}

global md_file,package_name,conf_file
md_file = "nb.md"
package_name = "com.example"
ISOTIMEFORMAT='%Y-%m-%d %X'
clazz_box = {} #< id , Entity >
api_box = []

class API_Request(object):
	def __init__(self, api_desc,param_list,api_url,api_name,response_type):
		self.api_desc = api_desc
		self.param_list = param_list
		self.api_url = api_url
		self.api_name = api_name
		self.response_type = response_type

class Request_Param(object):
	"""Request Parameters"""
	def __init__(self, arg1,arg2,arg3,arg4,arg5):
		self.key = arg1
		self.name = arg2
		self.type = arg3
		self.remark = arg4
		self.must = arg5
	def toString(self):
		return self.key+";"+self.name+";"+self.type+";"+self.remark+";"+self.must

class Entity(object):
	def __init__(self, name,params):
		self.name = name
		self.params = params


def get_api_doc():
	for api_k,api_v in apis.items():
		print '\033[34m Parser API: ',api_k
		url = '%smethod?serviceAlias=%s&methodAlias=%s&version=1.0.0'%(doc_url,api_v,api_k)
		try:
			f = urllib2.urlopen(url).read()
			api_box.append(parser_api(f))
		except urllib2.URLError, e:
			print e.reason
	# TODO write iapi
	write_iapi(api_box)
	# TODO write response class
	for ck,cv in clazz_box.items():
		write_bean(cv)

def parser_api(json_data):
	api_jo = json.loads(json_data)
	api_name = api_jo["text"].encode('utf-8')
	data_list = api_jo["data"]
	for data in data_list:
		if (data['key'] == u'方法说明'):
			api_desc = data['value']
		if (data['key'] == u'请求地址'):
			api_url = data['value']
		if (data['key'] == u'版本号'):
			api_version = data['value']
		if (data['key'] == u'TREE:REQUEST'):
			param_list = parser_request(data['value'])
		if (data['key'] == u'TREE:RESPONSE'):
			response_type = parser_response(api_name,data['value'])
	return API_Request(api_desc,param_list,api_url,api_name,response_type)
	

def write_iapi(api_box):
	if not os.path.exists("output"):
		os.makedirs("output")
	target_file = open("output/IAPI.java",'w')
	target_file.write("package %s;\n\n" % package_name)
	target_file.write("import com.sunny.engine.*;\nimport com.sunny.engine.api.*;\n")
	target_file.write("import %s.bean.*;\n" % package_name)
	target_file.write("import java.io.File;\nimport java.util.List;\nimport java.util.Date;\n\n")
	target_file.write("/**\n * generated by script.\n * Created on %s.\n*/" % time.strftime( ISOTIMEFORMAT, time.localtime()))
	target_file.write("public interface IAPI {\n\n")
	#write params
	for api_request in api_box:	
		target_file.write("    /**\n     * %s\n" % api_request.api_desc.encode('utf-8'))
		for param in api_request.param_list:
			target_file.write("     * @param %s %s\n" % (param.name,param.remark))
		target_file.write("     */\n")
		target_file.write("    @ACTION(\"%s\")\n" % api_request.api_url)
		target_file.write("    ITask<%s> %s(\n" % (api_request.response_type,api_request.api_name))
		x=0
		for param in api_request.param_list:
			x+=1
			if param.must == '1':
				target_file.write("        @PARAM(\"%s\") %s %s" % (param.key.strip(),param.type,param.name.strip()))
			else :
				target_file.write("        @PARAM(value = \"%s\", optional = true)  %s %s" % (param.key.strip(),param.type,param.name.strip()))			
			if x<len(api_request.param_list):
				target_file.write(",")
			target_file.write("\n")
		target_file.write("    );\n\n")

	target_file.write("}")
	target_file.close()

def parser_request(json_data):
	rq_jo = json.loads(json_data)
	param_list = []
	for rq_data in rq_jo:
		if rq_data['parent'] == u'request':
			if not (rq_data['id'] in request_filter):
				#params in request.
				rq_info = rq_data['text'].encode("utf-8")
				#infos = re.split('\[|\]',rq_info)
				infos = rq_info.split('[',2)
				if len(infos)>1:
					rq_type = infos[1].rstrip(':').rstrip(']');
					if rq_type.startswith('List ('):
						# List : list[List (PayRoomDto)][bala bala]
						list_type = rp_type.lstrip('List (').rstrip(')')
						rq_type = 'List<%s>'%list_type
					rp_tmp = Request_Param(infos[0],infos[0],rq_type,'','0')
				if len(infos)>2:
					rp_tmp.remark = '['+infos[2]
					if infos[2].endswith('[不能为空]'):
						rp_tmp.must = '1'
				param_list.append(rp_tmp)
	return param_list

def format_name(name):
	return name[0].upper()+name[1:]

def write_bean(entity):
	if not os.path.exists("output/bean/"):
		os.makedirs("output/bean/")
	class_file = open("output/bean/%s.java" % entity.name,'w')
	class_file.write("package %s.bean;\n\n" % package_name)
	class_file.write("import java.util.List;\nimport java.io.Serializable;\n")
	class_file.write("import java.util.Date;\n")
	class_file.write("/**\n * generated by script.\n * Created on %s.\n*/\n" % time.strftime( ISOTIMEFORMAT, time.localtime()))
	class_file.write("public class %s  implements Serializable{\n" % entity.name)	
	for p_value in entity.params:
		class_file.write(p_value)
	class_file.write("}")
	class_file.close()

def parser_response(api_name,json_data):
	rp_jo = json.loads(json_data)
	#add class
	class_name = format_name(api_name)+'Result'
	clazz_box[api_name+'.data'] = Entity(class_name,[])
	for rp_item in rp_jo:
		if not (rp_item['id'] in response_id_filter):
			rp_info = rp_item['text'].encode("utf-8")
			key = api_name+'.'+rp_item['parent'].encode("utf-8")
			#clazz_box[key].params.append(rp_info)
			output_line = ''
			infos = rp_info.split('[',2)
			rp_remark = ''
			if len(infos) > 1:
				rp_type = infos[1].rstrip(']')
				if len(infos) > 2:
					rp_remark = '['+infos[2]
				if rp_type in common_types:
					# common string : mid[String][ABC ID]
					output_line = ('    /**\n    * %s\n    */\n    public %s %s;\n' % (rp_remark,rp_type,infos[0]))
				elif rp_type.startswith('List ('):
					# List : list[List (PayRoomDto)][bala bala]
					list_type = rp_type.lstrip('List (').rstrip(')')
					output_line = ('    /**\n    * %s\n    */\n    public List<%s> %s;\n' % (rp_remark,list_type,infos[0]))
					#add class
					clazz_box[api_name+'.'+rp_item['id'].encode("utf-8")] = Entity(format_name(list_type),[])
					print '\033[32m add class of list (',format_name(list_type),' ) @ ',api_name
				else :
					# Entity : entity[PropertyChargesOrder][bala bala]
					output_line = ('    /**\n    * %s\n    */\n    public %s %s;\n' % (rp_remark,format_name(rp_type),infos[0]))
					#add class
					clazz_box[api_name+'.'+rp_item['id'].encode("utf-8")] = Entity(format_name(rp_type),[])
					print '\033[32m add class (',format_name(rp_type),' ) @ ',api_name
				# add params
				clazz_box[key].params.append(output_line)
	return class_name
					
opts, args = getopt.getopt(sys.argv[1:], "hp:",["help"])
for opt, arg in opts:
	if opt in ("-p"):
		package_name = arg
	elif opt in ("-f"):
		package_name = arg
	elif opt in ("-c"):
		conf_file = arg
get_api_doc()
#parser_api(api_data.readline())
